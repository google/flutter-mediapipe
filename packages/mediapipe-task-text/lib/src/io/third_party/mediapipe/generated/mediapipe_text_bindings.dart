/* Copyright 2023 The MediaPipe Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:mediapipe_core/src/io/third_party/mediapipe/generated/mediapipe_common_bindings.dart'
    as imp1;

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<LanguageDetectorOptions>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'language_detector_create')
external ffi.Pointer<ffi.Void> language_detector_create(
  ffi.Pointer<LanguageDetectorOptions> options,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_msg,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<LanguageDetectorResult>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'language_detector_detect')
external int language_detector_detect(
  ffi.Pointer<ffi.Void> detector,
  ffi.Pointer<ffi.Char> utf8_str,
  ffi.Pointer<LanguageDetectorResult> result,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_msg,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<LanguageDetectorResult>)>(
    symbol: 'language_detector_close_result')
external void language_detector_close_result(
  ffi.Pointer<LanguageDetectorResult> result,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'language_detector_close')
external int language_detector_close(
  ffi.Pointer<ffi.Void> detector,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_msg,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<TextClassifierOptions>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'text_classifier_create')
external ffi.Pointer<ffi.Void> text_classifier_create(
  ffi.Pointer<TextClassifierOptions> options,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_msg,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<TextClassifierResult>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'text_classifier_classify')
external int text_classifier_classify(
  ffi.Pointer<ffi.Void> classifier,
  ffi.Pointer<ffi.Char> utf8_str,
  ffi.Pointer<TextClassifierResult> result,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_msg,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<TextClassifierResult>)>(
    symbol: 'text_classifier_close_result')
external void text_classifier_close_result(
  ffi.Pointer<TextClassifierResult> result,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'text_classifier_close')
external int text_classifier_close(
  ffi.Pointer<ffi.Void> classifier,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_msg,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<TextEmbedderOptions>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'text_embedder_create')
external ffi.Pointer<ffi.Void> text_embedder_create(
  ffi.Pointer<TextEmbedderOptions> options,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_msg,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<TextEmbedderResult>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'text_embedder_embed')
external int text_embedder_embed(
  ffi.Pointer<ffi.Void> embedder,
  ffi.Pointer<ffi.Char> utf8_str,
  ffi.Pointer<TextEmbedderResult> result,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_msg,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<TextEmbedderResult>)>(
    symbol: 'text_embedder_close_result')
external void text_embedder_close_result(
  ffi.Pointer<TextEmbedderResult> result,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'text_embedder_close')
external int text_embedder_close(
  ffi.Pointer<ffi.Void> embedder,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_msg,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<imp1.Embedding>,
            ffi.Pointer<imp1.Embedding>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'text_embedder_cosine_similarity')
external int text_embedder_cosine_similarity(
  ffi.Pointer<imp1.Embedding> u,
  ffi.Pointer<imp1.Embedding> v,
  ffi.Pointer<ffi.Double> similarity,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_msg,
);

final class LanguageDetectorPrediction extends ffi.Struct {
  external ffi.Pointer<ffi.Char> language_code;

  @ffi.Float()
  external double probability;
}

final class LanguageDetectorResult extends ffi.Struct {
  external ffi.Pointer<LanguageDetectorPrediction> predictions;

  @ffi.Uint32()
  external int predictions_count;
}

final class LanguageDetectorOptions extends ffi.Struct {
  external imp1.BaseOptions base_options;

  external imp1.ClassifierOptions classifier_options;
}

final class TextClassifierOptions extends ffi.Struct {
  external imp1.BaseOptions base_options;

  external imp1.ClassifierOptions classifier_options;
}

typedef TextClassifierResult = imp1.ClassificationResult;

final class TextEmbedderOptions extends ffi.Struct {
  external imp1.BaseOptions base_options;

  external imp1.EmbedderOptions embedder_options;
}

typedef TextEmbedderResult = imp1.EmbeddingResult;

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;
